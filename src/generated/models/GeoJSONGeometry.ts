/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 8.0.0
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { GeoJSONLineString } from "./GeoJSONLineString";
import {
  instanceOfGeoJSONLineString,
  GeoJSONLineStringFromJSON,
  GeoJSONLineStringFromJSONTyped,
  GeoJSONLineStringToJSON,
} from "./GeoJSONLineString";
import type { GeoJSONPoint } from "./GeoJSONPoint";
import {
  instanceOfGeoJSONPoint,
  GeoJSONPointFromJSON,
  GeoJSONPointFromJSONTyped,
  GeoJSONPointToJSON,
} from "./GeoJSONPoint";
import type { GeoJSONPolygon } from "./GeoJSONPolygon";
import {
  instanceOfGeoJSONPolygon,
  GeoJSONPolygonFromJSON,
  GeoJSONPolygonFromJSONTyped,
  GeoJSONPolygonToJSON,
} from "./GeoJSONPolygon";

/**
 * @type GeoJSONGeometry
 *
 * @export
 */
export type GeoJSONGeometry =
  | ({ type: "LineString" } & GeoJSONLineString)
  | ({ type: "Point" } & GeoJSONPoint)
  | ({ type: "Polygon" } & GeoJSONPolygon);

export function GeoJSONGeometryFromJSON(json: any): GeoJSONGeometry {
  return GeoJSONGeometryFromJSONTyped(json, false);
}

export function GeoJSONGeometryFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): GeoJSONGeometry {
  if (json == null) {
    return json;
  }
  switch (json["type"]) {
    case "LineString":
      return Object.assign({}, GeoJSONLineStringFromJSONTyped(json, true), {
        type: "LineString",
      } as const);
    case "Point":
      return Object.assign({}, GeoJSONPointFromJSONTyped(json, true), {
        type: "Point",
      } as const);
    case "Polygon":
      return Object.assign({}, GeoJSONPolygonFromJSONTyped(json, true), {
        type: "Polygon",
      } as const);
    default:
      throw new Error(
        `No variant of GeoJSONGeometry exists with 'type=${json["type"]}'`,
      );
  }
}

export function GeoJSONGeometryToJSON(json: any): any {
  return GeoJSONGeometryToJSONTyped(json, false);
}

export function GeoJSONGeometryToJSONTyped(
  value?: GeoJSONGeometry | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }
  switch (value["type"]) {
    case "LineString":
      return Object.assign({}, GeoJSONLineStringToJSON(value), {
        type: "LineString",
      } as const);
    case "Point":
      return Object.assign({}, GeoJSONPointToJSON(value), {
        type: "Point",
      } as const);
    case "Polygon":
      return Object.assign({}, GeoJSONPolygonToJSON(value), {
        type: "Polygon",
      } as const);
    default:
      throw new Error(
        `No variant of GeoJSONGeometry exists with 'type=${value["type"]}'`,
      );
  }
}
