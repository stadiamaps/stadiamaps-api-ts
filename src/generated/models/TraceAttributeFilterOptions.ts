/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 10.0.0
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { TraceAttributeKey } from "./TraceAttributeKey";
import {
  TraceAttributeKeyFromJSON,
  TraceAttributeKeyFromJSONTyped,
  TraceAttributeKeyToJSON,
  TraceAttributeKeyToJSONTyped,
} from "./TraceAttributeKey";

/**
 *
 * @export
 * @interface TraceAttributeFilterOptions
 */
export interface TraceAttributeFilterOptions {
  /**
   *
   * @type {Array<TraceAttributeKey>}
   * @memberof TraceAttributeFilterOptions
   */
  attributes: Array<TraceAttributeKey>;
  /**
   * Determines whether the list of attributes will be used as a whitelist or a blacklist.
   * @type {string}
   * @memberof TraceAttributeFilterOptions
   */
  action: TraceAttributeFilterOptionsActionEnum;
}

/**
 * @export
 */
export const TraceAttributeFilterOptionsActionEnum = {
  Include: "include",
  Exclude: "exclude",
} as const;
export type TraceAttributeFilterOptionsActionEnum =
  (typeof TraceAttributeFilterOptionsActionEnum)[keyof typeof TraceAttributeFilterOptionsActionEnum];

/**
 * Check if a given object implements the TraceAttributeFilterOptions interface.
 */
export function instanceOfTraceAttributeFilterOptions(
  value: object,
): value is TraceAttributeFilterOptions {
  if (!("attributes" in value) || value["attributes"] === undefined)
    return false;
  if (!("action" in value) || value["action"] === undefined) return false;
  return true;
}

export function TraceAttributeFilterOptionsFromJSON(
  json: any,
): TraceAttributeFilterOptions {
  return TraceAttributeFilterOptionsFromJSONTyped(json, false);
}

export function TraceAttributeFilterOptionsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): TraceAttributeFilterOptions {
  if (json == null) {
    return json;
  }
  return {
    attributes: (json["attributes"] as Array<any>).map(
      TraceAttributeKeyFromJSON,
    ),
    action: json["action"],
  };
}

export function TraceAttributeFilterOptionsToJSON(
  json: any,
): TraceAttributeFilterOptions {
  return TraceAttributeFilterOptionsToJSONTyped(json, false);
}

export function TraceAttributeFilterOptionsToJSONTyped(
  value?: TraceAttributeFilterOptions | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    attributes: (value["attributes"] as Array<any>).map(
      TraceAttributeKeyToJSON,
    ),
    action: value["action"],
  };
}
