/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 9.2.1
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { DistanceUnit } from "./DistanceUnit";
import {
  DistanceUnitFromJSON,
  DistanceUnitFromJSONTyped,
  DistanceUnitToJSON,
  DistanceUnitToJSONTyped,
} from "./DistanceUnit";
import type { RoutingLanguages } from "./RoutingLanguages";
import {
  RoutingLanguagesFromJSON,
  RoutingLanguagesFromJSONTyped,
  RoutingLanguagesToJSON,
  RoutingLanguagesToJSONTyped,
} from "./RoutingLanguages";

/**
 *
 * @export
 * @interface DirectionsOptions
 */
export interface DirectionsOptions {
  /**
   *
   * @type {DistanceUnit}
   * @memberof DirectionsOptions
   */
  units?: DistanceUnit;
  /**
   *
   * @type {RoutingLanguages}
   * @memberof DirectionsOptions
   */
  language?: RoutingLanguages;
  /**
   * The level of directional narrative to include. Locations and times will always be returned, but narrative generation verbosity can be controlled with this parameter.
   * @type {string}
   * @memberof DirectionsOptions
   */
  directionsType?: DirectionsOptionsDirectionsTypeEnum;
}

/**
 * @export
 */
export const DirectionsOptionsDirectionsTypeEnum = {
  None: "none",
  Maneuvers: "maneuvers",
  Instructions: "instructions",
} as const;
export type DirectionsOptionsDirectionsTypeEnum =
  (typeof DirectionsOptionsDirectionsTypeEnum)[keyof typeof DirectionsOptionsDirectionsTypeEnum];

/**
 * Check if a given object implements the DirectionsOptions interface.
 */
export function instanceOfDirectionsOptions(
  value: object,
): value is DirectionsOptions {
  return true;
}

export function DirectionsOptionsFromJSON(json: any): DirectionsOptions {
  return DirectionsOptionsFromJSONTyped(json, false);
}

export function DirectionsOptionsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): DirectionsOptions {
  if (json == null) {
    return json;
  }
  return {
    units:
      json["units"] == null ? undefined : DistanceUnitFromJSON(json["units"]),
    language:
      json["language"] == null
        ? undefined
        : RoutingLanguagesFromJSON(json["language"]),
    directionsType:
      json["directions_type"] == null ? undefined : json["directions_type"],
  };
}

export function DirectionsOptionsToJSON(json: any): DirectionsOptions {
  return DirectionsOptionsToJSONTyped(json, false);
}

export function DirectionsOptionsToJSONTyped(
  value?: DirectionsOptions | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    units: DistanceUnitToJSON(value["units"]),
    language: RoutingLanguagesToJSON(value["language"]),
    directions_type: value["directionsType"],
  };
}
