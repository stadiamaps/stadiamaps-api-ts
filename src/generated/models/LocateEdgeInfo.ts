/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 9.0.0
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { BikeNetwork } from "./BikeNetwork";
import {
  BikeNetworkFromJSON,
  BikeNetworkFromJSONTyped,
  BikeNetworkToJSON,
  BikeNetworkToJSONTyped,
} from "./BikeNetwork";

/**
 *
 * @export
 * @interface LocateEdgeInfo
 */
export interface LocateEdgeInfo {
  /**
   * The mean elevation, in meters, relative to sea level.
   * @type {number}
   * @memberof LocateEdgeInfo
   */
  meanElevation?: number;
  /**
   * An encoded polyline (https://developers.google.com/maps/documentation/utilities/polylinealgorithm). Note that the polyline is always encoded with 6 digits of precision, whereas most implementations default to 5.
   * @type {string}
   * @memberof LocateEdgeInfo
   */
  shape: string;
  /**
   * A list of names that the edge goes by.
   * @type {Array<string>}
   * @memberof LocateEdgeInfo
   */
  names?: Array<string>;
  /**
   *
   * @type {BikeNetwork}
   * @memberof LocateEdgeInfo
   */
  bikeNetwork?: BikeNetwork;
  /**
   * The OSM way ID associated with this edge.
   * @type {number}
   * @memberof LocateEdgeInfo
   */
  wayId: number;
}

/**
 * Check if a given object implements the LocateEdgeInfo interface.
 */
export function instanceOfLocateEdgeInfo(
  value: object,
): value is LocateEdgeInfo {
  if (!("shape" in value) || value["shape"] === undefined) return false;
  if (!("wayId" in value) || value["wayId"] === undefined) return false;
  return true;
}

export function LocateEdgeInfoFromJSON(json: any): LocateEdgeInfo {
  return LocateEdgeInfoFromJSONTyped(json, false);
}

export function LocateEdgeInfoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): LocateEdgeInfo {
  if (json == null) {
    return json;
  }
  return {
    meanElevation:
      json["mean_elevation"] == null ? undefined : json["mean_elevation"],
    shape: json["shape"],
    names: json["names"] == null ? undefined : json["names"],
    bikeNetwork:
      json["bike_network"] == null
        ? undefined
        : BikeNetworkFromJSON(json["bike_network"]),
    wayId: json["way_id"],
  };
}

export function LocateEdgeInfoToJSON(json: any): LocateEdgeInfo {
  return LocateEdgeInfoToJSONTyped(json, false);
}

export function LocateEdgeInfoToJSONTyped(
  value?: LocateEdgeInfo | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    mean_elevation: value["meanElevation"],
    shape: value["shape"],
    names: value["names"],
    bike_network: BikeNetworkToJSON(value["bikeNetwork"]),
    way_id: value["wayId"],
  };
}
