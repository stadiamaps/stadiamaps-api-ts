/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 9.3.0
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { WofContext } from "./WofContext";
import {
  WofContextFromJSON,
  WofContextFromJSONTyped,
  WofContextToJSON,
  WofContextToJSONTyped,
} from "./WofContext";

/**
 * The geographic context for a feature.
 *
 * Note that while data sources and country codes are listed,
 * this does not *necessarily* mean that the view is a specific hierarchy endorsed by that source.
 * We generally attempt to present the same view as OpenStreetMap.
 * Contact us if your use case requires a specific political view of the world.
 * @export
 * @interface Context
 */
export interface Context {
  /**
   * The ISO 3166-1 alpha-2 country code in which the feature is located.
   * @type {string}
   * @memberof Context
   */
  iso3166A2?: string | null;
  /**
   * The ISO 3166-1 alpha-3 country code in which the feature is located.
   * @type {string}
   * @memberof Context
   */
  iso3166A3?: string | null;
  /**
   * The geographic context, with administrative hierarchy modeled using the Who's on First taxonomy.
   * @type {WofContext}
   * @memberof Context
   */
  whosonfirst: WofContext;
}

/**
 * Check if a given object implements the Context interface.
 */
export function instanceOfContext(value: object): value is Context {
  if (!("whosonfirst" in value) || value["whosonfirst"] === undefined)
    return false;
  return true;
}

export function ContextFromJSON(json: any): Context {
  return ContextFromJSONTyped(json, false);
}

export function ContextFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Context {
  if (json == null) {
    return json;
  }
  return {
    iso3166A2: json["iso_3166_a2"] == null ? undefined : json["iso_3166_a2"],
    iso3166A3: json["iso_3166_a3"] == null ? undefined : json["iso_3166_a3"],
    whosonfirst: WofContextFromJSON(json["whosonfirst"]),
  };
}

export function ContextToJSON(json: any): Context {
  return ContextToJSONTyped(json, false);
}

export function ContextToJSONTyped(
  value?: Context | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    iso_3166_a2: value["iso3166A2"],
    iso_3166_a3: value["iso3166A3"],
    whosonfirst: WofContextToJSON(value["whosonfirst"]),
  };
}
