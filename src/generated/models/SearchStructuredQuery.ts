/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 6.6.0
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { PeliasSource } from "./PeliasSource";
import {
  PeliasSourceFromJSON,
  PeliasSourceFromJSONTyped,
  PeliasSourceToJSON,
} from "./PeliasSource";
import type { PeliasLayer } from "./PeliasLayer";
import {
  PeliasLayerFromJSON,
  PeliasLayerFromJSONTyped,
  PeliasLayerToJSON,
} from "./PeliasLayer";

/**
 *
 * @export
 * @interface SearchStructuredQuery
 */
export interface SearchStructuredQuery {
  /**
   * A street name, optionally with a house number.
   * @type {string}
   * @memberof SearchStructuredQuery
   */
  address?: string;
  /**
   * Varies by area, but has a locally specific meaning (NOT always an official administrative unit).
   * @type {string}
   * @memberof SearchStructuredQuery
   */
  neighbourhood?: string;
  /**
   * A unit within a city (not widely used, but present in places like NYC and Mexico City).
   * @type {string}
   * @memberof SearchStructuredQuery
   */
  borough?: string;
  /**
   * The city, village, town, etc. that the place/address is part of.
   * @type {string}
   * @memberof SearchStructuredQuery
   */
  locality?: string;
  /**
   * Administrative divisions between localities and regions. Not commonly used as input to structured geocoding.
   * @type {string}
   * @memberof SearchStructuredQuery
   */
  county?: string;
  /**
   * Typically the first administrative division within a country. For example, a US state or a Canadian province.
   * @type {string}
   * @memberof SearchStructuredQuery
   */
  region?: string;
  /**
   * A mail sorting code.
   * @type {string}
   * @memberof SearchStructuredQuery
   */
  postalCode?: string;
  /**
   * A full name (ex: Canada), or a 2 or 3 character ISO code. Prefer ISO codes when possible.
   * @type {string}
   * @memberof SearchStructuredQuery
   */
  country?: string;
  /**
   * The latitude of the point to focus the search on. This will bias results toward the focus point. Requires `focus.point.lon`.
   * @type {number}
   * @memberof SearchStructuredQuery
   */
  focusPointLat?: number;
  /**
   * The longitude of the point to focus the search on. This will bias results toward the focus point. Requires `focus.point.lat`.
   * @type {number}
   * @memberof SearchStructuredQuery
   */
  focusPointLon?: number;
  /**
   * Defines the min latitude component of a bounding box to limit the search to. Requires all other `boundary.rect` parameters to be specified.
   * @type {number}
   * @memberof SearchStructuredQuery
   */
  boundaryRectMinLat?: number;
  /**
   * Defines the max latitude component of a bounding box to limit the search to. Requires all other `boundary.rect` parameters to be specified.
   * @type {number}
   * @memberof SearchStructuredQuery
   */
  boundaryRectMaxLat?: number;
  /**
   * Defines the min longitude component of a bounding box to limit the search to. Requires all other `boundary.rect` parameters to be specified.
   * @type {number}
   * @memberof SearchStructuredQuery
   */
  boundaryRectMinLon?: number;
  /**
   * Defines the max longitude component of a bounding box to limit the search to. Requires all other `boundary.rect` parameters to be specified.
   * @type {number}
   * @memberof SearchStructuredQuery
   */
  boundaryRectMaxLon?: number;
  /**
   * The latitude of the center of a circle to limit the search to. Requires `boundary.circle.lon`.
   * @type {number}
   * @memberof SearchStructuredQuery
   */
  boundaryCircleLat?: number;
  /**
   * The longitude of the center of a circle to limit the search to. Requires `boundary.circle.lat`.
   * @type {number}
   * @memberof SearchStructuredQuery
   */
  boundaryCircleLon?: number;
  /**
   * The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified.
   * @type {number}
   * @memberof SearchStructuredQuery
   */
  boundaryCircleRadius?: number;
  /**
   * A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible.
   * @type {Array<string>}
   * @memberof SearchStructuredQuery
   */
  boundaryCountry?: Array<string>;
  /**
   * The Pelias GID of an area to limit the search to.
   * @type {string}
   * @memberof SearchStructuredQuery
   */
  boundaryGid?: string;
  /**
   * A list of layers to limit the search to.
   * @type {Array<PeliasLayer>}
   * @memberof SearchStructuredQuery
   */
  layers?: Array<PeliasLayer>;
  /**
   * A list of sources to limit the search to.
   * @type {Array<PeliasSource>}
   * @memberof SearchStructuredQuery
   */
  sources?: Array<PeliasSource>;
  /**
   * The maximum number of results to return.
   * @type {number}
   * @memberof SearchStructuredQuery
   */
  size?: number;
  /**
   * A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a `langtag` (in RFC 5646 terms) can contain script, region, etc., only the `language` portion, an ISO 639 code, will be considered. So `en-US` and `en-GB` will both be treated as English.
   * @type {string}
   * @memberof SearchStructuredQuery
   */
  lang?: string;
}

/**
 * Check if a given object implements the SearchStructuredQuery interface.
 */
export function instanceOfSearchStructuredQuery(
  value: object,
): value is SearchStructuredQuery {
  return true;
}

export function SearchStructuredQueryFromJSON(
  json: any,
): SearchStructuredQuery {
  return SearchStructuredQueryFromJSONTyped(json, false);
}

export function SearchStructuredQueryFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): SearchStructuredQuery {
  if (json == null) {
    return json;
  }
  return {
    address: json["address"] == null ? undefined : json["address"],
    neighbourhood:
      json["neighbourhood"] == null ? undefined : json["neighbourhood"],
    borough: json["borough"] == null ? undefined : json["borough"],
    locality: json["locality"] == null ? undefined : json["locality"],
    county: json["county"] == null ? undefined : json["county"],
    region: json["region"] == null ? undefined : json["region"],
    postalCode: json["postalCode"] == null ? undefined : json["postalCode"],
    country: json["country"] == null ? undefined : json["country"],
    focusPointLat:
      json["focus.point.lat"] == null ? undefined : json["focus.point.lat"],
    focusPointLon:
      json["focus.point.lon"] == null ? undefined : json["focus.point.lon"],
    boundaryRectMinLat:
      json["boundary.rect.min_lat"] == null
        ? undefined
        : json["boundary.rect.min_lat"],
    boundaryRectMaxLat:
      json["boundary.rect.max_lat"] == null
        ? undefined
        : json["boundary.rect.max_lat"],
    boundaryRectMinLon:
      json["boundary.rect.min_lon"] == null
        ? undefined
        : json["boundary.rect.min_lon"],
    boundaryRectMaxLon:
      json["boundary.rect.max_lon"] == null
        ? undefined
        : json["boundary.rect.max_lon"],
    boundaryCircleLat:
      json["boundary.circle.lat"] == null
        ? undefined
        : json["boundary.circle.lat"],
    boundaryCircleLon:
      json["boundary.circle.lon"] == null
        ? undefined
        : json["boundary.circle.lon"],
    boundaryCircleRadius:
      json["boundary.circle.radius"] == null
        ? undefined
        : json["boundary.circle.radius"],
    boundaryCountry:
      json["boundary.country"] == null ? undefined : json["boundary.country"],
    boundaryGid:
      json["boundary.gid"] == null ? undefined : json["boundary.gid"],
    layers:
      json["layers"] == null
        ? undefined
        : (json["layers"] as Array<any>).map(PeliasLayerFromJSON),
    sources:
      json["sources"] == null
        ? undefined
        : (json["sources"] as Array<any>).map(PeliasSourceFromJSON),
    size: json["size"] == null ? undefined : json["size"],
    lang: json["lang"] == null ? undefined : json["lang"],
  };
}

export function SearchStructuredQueryToJSON(
  value?: SearchStructuredQuery | null,
): any {
  if (value == null) {
    return value;
  }
  return {
    address: value["address"],
    neighbourhood: value["neighbourhood"],
    borough: value["borough"],
    locality: value["locality"],
    county: value["county"],
    region: value["region"],
    postalCode: value["postalCode"],
    country: value["country"],
    "focus.point.lat": value["focusPointLat"],
    "focus.point.lon": value["focusPointLon"],
    "boundary.rect.min_lat": value["boundaryRectMinLat"],
    "boundary.rect.max_lat": value["boundaryRectMaxLat"],
    "boundary.rect.min_lon": value["boundaryRectMinLon"],
    "boundary.rect.max_lon": value["boundaryRectMaxLon"],
    "boundary.circle.lat": value["boundaryCircleLat"],
    "boundary.circle.lon": value["boundaryCircleLon"],
    "boundary.circle.radius": value["boundaryCircleRadius"],
    "boundary.country": value["boundaryCountry"],
    "boundary.gid": value["boundaryGid"],
    layers:
      value["layers"] == null
        ? undefined
        : (value["layers"] as Array<any>).map(PeliasLayerToJSON),
    sources:
      value["sources"] == null
        ? undefined
        : (value["sources"] as Array<any>).map(PeliasSourceToJSON),
    size: value["size"],
    lang: value["lang"],
  };
}
