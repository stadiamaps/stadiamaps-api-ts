/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 9.0.0
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { GeocodingObject } from "./GeocodingObject";
import {
  GeocodingObjectFromJSON,
  GeocodingObjectFromJSONTyped,
  GeocodingObjectToJSON,
  GeocodingObjectToJSONTyped,
} from "./GeocodingObject";
import type { GeocodingGeoJSONFeature } from "./GeocodingGeoJSONFeature";
import {
  GeocodingGeoJSONFeatureFromJSON,
  GeocodingGeoJSONFeatureFromJSONTyped,
  GeocodingGeoJSONFeatureToJSON,
  GeocodingGeoJSONFeatureToJSONTyped,
} from "./GeocodingGeoJSONFeature";

/**
 *
 * @export
 * @interface GeocodeResponse
 */
export interface GeocodeResponse {
  /**
   *
   * @type {GeocodingObject}
   * @memberof GeocodeResponse
   */
  geocoding: GeocodingObject;
  /**
   * An array of 4 floating point numbers representing the (W, S, E, N) extremes of the features found.
   * @type {Array<number>}
   * @memberof GeocodeResponse
   */
  bbox?: Array<number>;
  /**
   *
   * @type {Array<GeocodingGeoJSONFeature>}
   * @memberof GeocodeResponse
   */
  features: Array<GeocodingGeoJSONFeature>;
}

/**
 * Check if a given object implements the GeocodeResponse interface.
 */
export function instanceOfGeocodeResponse(
  value: object,
): value is GeocodeResponse {
  if (!("geocoding" in value) || value["geocoding"] === undefined) return false;
  if (!("features" in value) || value["features"] === undefined) return false;
  return true;
}

export function GeocodeResponseFromJSON(json: any): GeocodeResponse {
  return GeocodeResponseFromJSONTyped(json, false);
}

export function GeocodeResponseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): GeocodeResponse {
  if (json == null) {
    return json;
  }
  return {
    geocoding: GeocodingObjectFromJSON(json["geocoding"]),
    bbox: json["bbox"] == null ? undefined : json["bbox"],
    features: (json["features"] as Array<any>).map(
      GeocodingGeoJSONFeatureFromJSON,
    ),
  };
}

export function GeocodeResponseToJSON(json: any): GeocodeResponse {
  return GeocodeResponseToJSONTyped(json, false);
}

export function GeocodeResponseToJSONTyped(
  value?: GeocodeResponse | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    geocoding: GeocodingObjectToJSON(value["geocoding"]),
    bbox: value["bbox"],
    features: (value["features"] as Array<any>).map(
      GeocodingGeoJSONFeatureToJSON,
    ),
  };
}
