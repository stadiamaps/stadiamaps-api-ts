/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 9.3.0
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 *
 * @export
 * @interface TzResponse
 */
export interface TzResponse {
  /**
   * The canonical time zone ID. In the event that multiple time zones could be returned, the first one from the Unicode CLDR timezone.xml is returned.
   * @type {string}
   * @memberof TzResponse
   */
  tzId: string;
  /**
   * The base offset, in seconds, from UTC that is normally in effect for this time zone.
   * @type {number}
   * @memberof TzResponse
   */
  baseUtcOffset: number;
  /**
   * The special offset, in seconds, from UTC that is in effect for this time zone as of the queried timestamp (defaults to now). If no additional offsets are in effect, this value is zero. This typically reflects Daylight Saving Time, but may indicate other special offsets. To get the total offset in effect, add `dst_offset` and `utc_offset` together.
   * @type {number}
   * @memberof TzResponse
   */
  dstOffset: number;
  /**
   * Integer non-leap seconds since January 1, 1970 (UNIX timestamp). If a timestamp is included with the request parameters, it will be echoed here. Otherwise, this will contain the current timestamp.
   * @type {number}
   * @memberof TzResponse
   */
  timestamp: number;
  /**
   * The local time expressed as an RFC 2822 timestamp (e.g. Tue, 1 Jul 2003 10:52:37 +0200). If a timestamp is included in the request, it will be localized here. Otherwise, this will reflect the time of the request.
   * @type {string}
   * @memberof TzResponse
   */
  localRfc2822Timestamp: string;
  /**
   * The local time expressed as an RFC 3389 (ISO 8601) timestamp (e.g. 2003-06-01T10:52:37+02:00). If a timestamp is included in the request, it will be localized here. Otherwise, this will reflect the time of the request.
   * @type {string}
   * @memberof TzResponse
   */
  localRfc3389Timestamp: string;
}

/**
 * Check if a given object implements the TzResponse interface.
 */
export function instanceOfTzResponse(value: object): value is TzResponse {
  if (!("tzId" in value) || value["tzId"] === undefined) return false;
  if (!("baseUtcOffset" in value) || value["baseUtcOffset"] === undefined)
    return false;
  if (!("dstOffset" in value) || value["dstOffset"] === undefined) return false;
  if (!("timestamp" in value) || value["timestamp"] === undefined) return false;
  if (
    !("localRfc2822Timestamp" in value) ||
    value["localRfc2822Timestamp"] === undefined
  )
    return false;
  if (
    !("localRfc3389Timestamp" in value) ||
    value["localRfc3389Timestamp"] === undefined
  )
    return false;
  return true;
}

export function TzResponseFromJSON(json: any): TzResponse {
  return TzResponseFromJSONTyped(json, false);
}

export function TzResponseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): TzResponse {
  if (json == null) {
    return json;
  }
  return {
    tzId: json["tz_id"],
    baseUtcOffset: json["base_utc_offset"],
    dstOffset: json["dst_offset"],
    timestamp: json["timestamp"],
    localRfc2822Timestamp: json["local_rfc_2822_timestamp"],
    localRfc3389Timestamp: json["local_rfc_3389_timestamp"],
  };
}

export function TzResponseToJSON(json: any): TzResponse {
  return TzResponseToJSONTyped(json, false);
}

export function TzResponseToJSONTyped(
  value?: TzResponse | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    tz_id: value["tzId"],
    base_utc_offset: value["baseUtcOffset"],
    dst_offset: value["dstOffset"],
    timestamp: value["timestamp"],
    local_rfc_2822_timestamp: value["localRfc2822Timestamp"],
    local_rfc_3389_timestamp: value["localRfc3389Timestamp"],
  };
}
