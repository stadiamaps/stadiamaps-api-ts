/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 6.3.0
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SimpleRoutingWaypoint
 */
export interface SimpleRoutingWaypoint {
    /**
     * The latitude of a point in the shape.
     * @type {number}
     * @memberof SimpleRoutingWaypoint
     */
    lat: number;
    /**
     * The longitude of a point in the shape.
     * @type {number}
     * @memberof SimpleRoutingWaypoint
     */
    lon: number;
    /**
     * A `break` represents the start or end of a leg, and allows reversals. A `through` location is an intermediate waypoint that must be visited between `break`s, but at which reversals are not allowed. A `via` is similar to a `through` except that reversals are allowed. A `break_through` is similar to a `break` in that it can be the start/end of a leg, but does not allow reversals.
     * @type {string}
     * @memberof SimpleRoutingWaypoint
     */
    type?: SimpleRoutingWaypointTypeEnum;
}


/**
 * @export
 */
export const SimpleRoutingWaypointTypeEnum = {
    Break: 'break',
    Through: 'through',
    Via: 'via',
    BreakThrough: 'break_through'
} as const;
export type SimpleRoutingWaypointTypeEnum = typeof SimpleRoutingWaypointTypeEnum[keyof typeof SimpleRoutingWaypointTypeEnum];


/**
 * Check if a given object implements the SimpleRoutingWaypoint interface.
 */
export function instanceOfSimpleRoutingWaypoint(value: object): boolean {
    if (!('lat' in value)) return false;
    if (!('lon' in value)) return false;
    return true;
}

export function SimpleRoutingWaypointFromJSON(json: any): SimpleRoutingWaypoint {
    return SimpleRoutingWaypointFromJSONTyped(json, false);
}

export function SimpleRoutingWaypointFromJSONTyped(json: any, ignoreDiscriminator: boolean): SimpleRoutingWaypoint {
    if (json == null) {
        return json;
    }
    return {
        
        'lat': json['lat'],
        'lon': json['lon'],
        'type': json['type'] == null ? undefined : json['type'],
    };
}

export function SimpleRoutingWaypointToJSON(value?: SimpleRoutingWaypoint | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'lat': value['lat'],
        'lon': value['lon'],
        'type': value['type'],
    };
}

