/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 9.3.0
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 *
 * @export
 * @interface WhosOnFirstConcordances
 */
export interface WhosOnFirstConcordances {
  /**
   *
   * @type {string}
   * @memberof WhosOnFirstConcordances
   */
  eurographicsGiscoId?: string | null;
  /**
   *
   * @type {string}
   * @memberof WhosOnFirstConcordances
   */
  faaCode?: string | null;
  /**
   *
   * @type {string}
   * @memberof WhosOnFirstConcordances
   */
  factualId?: string | null;
  /**
   *
   * @type {string}
   * @memberof WhosOnFirstConcordances
   */
  fifaId?: string | null;
  /**
   *
   * @type {string}
   * @memberof WhosOnFirstConcordances
   */
  fipsCode?: string | null;
  /**
   * An Open Data France EPCI code.
   * @type {number}
   * @memberof WhosOnFirstConcordances
   */
  frGovEpciCode?: number | null;
  /**
   * Institut national de la statistique et des études économiques (Insee) code
   * @type {number}
   * @memberof WhosOnFirstConcordances
   */
  fraInseeCode?: number | null;
  /**
   *
   * @type {number}
   * @memberof WhosOnFirstConcordances
   */
  geonamesId?: number | null;
  /**
   *
   * @type {number}
   * @memberof WhosOnFirstConcordances
   */
  geoplanetId?: number | null;
  /**
   * A Statoids HASC ID.
   * @type {string}
   * @memberof WhosOnFirstConcordances
   */
  hascId?: string | null;
  /**
   *
   * @type {string}
   * @memberof WhosOnFirstConcordances
   */
  iataCode?: string | null;
  /**
   *
   * @type {string}
   * @memberof WhosOnFirstConcordances
   */
  icaoCode?: string | null;
  /**
   *
   * @type {string}
   * @memberof WhosOnFirstConcordances
   */
  ituId?: string | null;
  /**
   *
   * @type {string}
   * @memberof WhosOnFirstConcordances
   */
  karmashapesId?: string | null;
  /**
   *
   * @type {number}
   * @memberof WhosOnFirstConcordances
   */
  naturalEarthId?: number | null;
  /**
   * A Eurostat NUTS 2021 ID
   * @type {string}
   * @memberof WhosOnFirstConcordances
   */
  nuts2021Id?: string | null;
  /**
   *
   * @type {number}
   * @memberof WhosOnFirstConcordances
   */
  quattroshapesId?: number | null;
  /**
   * A Quattroshapes Point Gazetteer ID.
   * @type {number}
   * @memberof WhosOnFirstConcordances
   */
  quattroshapesPgId?: number | null;
  /**
   *
   * @type {number}
   * @memberof WhosOnFirstConcordances
   */
  usCensusGeoId?: number | null;
  /**
   *
   * @type {string}
   * @memberof WhosOnFirstConcordances
   */
  wikidataId?: string | null;
  /**
   *
   * @type {string}
   * @memberof WhosOnFirstConcordances
   */
  wikipediaPage?: string | null;
}

/**
 * Check if a given object implements the WhosOnFirstConcordances interface.
 */
export function instanceOfWhosOnFirstConcordances(
  value: object,
): value is WhosOnFirstConcordances {
  return true;
}

export function WhosOnFirstConcordancesFromJSON(
  json: any,
): WhosOnFirstConcordances {
  return WhosOnFirstConcordancesFromJSONTyped(json, false);
}

export function WhosOnFirstConcordancesFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): WhosOnFirstConcordances {
  if (json == null) {
    return json;
  }
  return {
    eurographicsGiscoId:
      json["eurographics_gisco_id"] == null
        ? undefined
        : json["eurographics_gisco_id"],
    faaCode: json["faa_code"] == null ? undefined : json["faa_code"],
    factualId: json["factual_id"] == null ? undefined : json["factual_id"],
    fifaId: json["fifa_id"] == null ? undefined : json["fifa_id"],
    fipsCode: json["fips_code"] == null ? undefined : json["fips_code"],
    frGovEpciCode:
      json["fr_gov_epci_code"] == null ? undefined : json["fr_gov_epci_code"],
    fraInseeCode:
      json["fra_insee_code"] == null ? undefined : json["fra_insee_code"],
    geonamesId: json["geonames_id"] == null ? undefined : json["geonames_id"],
    geoplanetId:
      json["geoplanet_id"] == null ? undefined : json["geoplanet_id"],
    hascId: json["hasc_id"] == null ? undefined : json["hasc_id"],
    iataCode: json["iata_code"] == null ? undefined : json["iata_code"],
    icaoCode: json["icao_code"] == null ? undefined : json["icao_code"],
    ituId: json["itu_id"] == null ? undefined : json["itu_id"],
    karmashapesId:
      json["karmashapes_id"] == null ? undefined : json["karmashapes_id"],
    naturalEarthId:
      json["natural_earth_id"] == null ? undefined : json["natural_earth_id"],
    nuts2021Id: json["nuts_2021_id"] == null ? undefined : json["nuts_2021_id"],
    quattroshapesId:
      json["quattroshapes_id"] == null ? undefined : json["quattroshapes_id"],
    quattroshapesPgId:
      json["quattroshapes_pg_id"] == null
        ? undefined
        : json["quattroshapes_pg_id"],
    usCensusGeoId:
      json["us_census_geo_id"] == null ? undefined : json["us_census_geo_id"],
    wikidataId: json["wikidata_id"] == null ? undefined : json["wikidata_id"],
    wikipediaPage:
      json["wikipedia_page"] == null ? undefined : json["wikipedia_page"],
  };
}

export function WhosOnFirstConcordancesToJSON(
  json: any,
): WhosOnFirstConcordances {
  return WhosOnFirstConcordancesToJSONTyped(json, false);
}

export function WhosOnFirstConcordancesToJSONTyped(
  value?: WhosOnFirstConcordances | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    eurographics_gisco_id: value["eurographicsGiscoId"],
    faa_code: value["faaCode"],
    factual_id: value["factualId"],
    fifa_id: value["fifaId"],
    fips_code: value["fipsCode"],
    fr_gov_epci_code: value["frGovEpciCode"],
    fra_insee_code: value["fraInseeCode"],
    geonames_id: value["geonamesId"],
    geoplanet_id: value["geoplanetId"],
    hasc_id: value["hascId"],
    iata_code: value["iataCode"],
    icao_code: value["icaoCode"],
    itu_id: value["ituId"],
    karmashapes_id: value["karmashapesId"],
    natural_earth_id: value["naturalEarthId"],
    nuts_2021_id: value["nuts2021Id"],
    quattroshapes_id: value["quattroshapesId"],
    quattroshapes_pg_id: value["quattroshapesPgId"],
    us_census_geo_id: value["usCensusGeoId"],
    wikidata_id: value["wikidataId"],
    wikipedia_page: value["wikipediaPage"],
  };
}
