/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 8.0.0
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 *
 * @export
 * @interface AnnotationFilters
 */
export interface AnnotationFilters {
  /**
   *
   * @type {string}
   * @memberof AnnotationFilters
   */
  action?: AnnotationFiltersActionEnum;
  /**
   * A set of granular attributes to include between every pair of coordinates along the route. This can significantly increase the response size.
   * @type {Array<string>}
   * @memberof AnnotationFilters
   */
  attributes?: Array<AnnotationFiltersAttributesEnum>;
}

/**
 * @export
 */
export const AnnotationFiltersActionEnum = {
  Include: "include",
  Exclude: "exclude",
} as const;
export type AnnotationFiltersActionEnum =
  (typeof AnnotationFiltersActionEnum)[keyof typeof AnnotationFiltersActionEnum];

/**
 * @export
 */
export const AnnotationFiltersAttributesEnum = {
  Speed: "shape_attributes.speed",
  SpeedLimit: "shape_attributes.speed_limit",
  Time: "shape_attributes.time",
  Length: "shape_attributes.length",
} as const;
export type AnnotationFiltersAttributesEnum =
  (typeof AnnotationFiltersAttributesEnum)[keyof typeof AnnotationFiltersAttributesEnum];

/**
 * Check if a given object implements the AnnotationFilters interface.
 */
export function instanceOfAnnotationFilters(
  value: object,
): value is AnnotationFilters {
  return true;
}

export function AnnotationFiltersFromJSON(json: any): AnnotationFilters {
  return AnnotationFiltersFromJSONTyped(json, false);
}

export function AnnotationFiltersFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): AnnotationFilters {
  if (json == null) {
    return json;
  }
  return {
    action: json["action"] == null ? undefined : json["action"],
    attributes: json["attributes"] == null ? undefined : json["attributes"],
  };
}

export function AnnotationFiltersToJSON(json: any): AnnotationFilters {
  return AnnotationFiltersToJSONTyped(json, false);
}

export function AnnotationFiltersToJSONTyped(
  value?: AnnotationFilters | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    action: value["action"],
    attributes: value["attributes"],
  };
}
