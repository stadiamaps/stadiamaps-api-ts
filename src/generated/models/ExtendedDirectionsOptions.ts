/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 9.1.1
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { AnnotationFilters } from "./AnnotationFilters";
import {
  AnnotationFiltersFromJSON,
  AnnotationFiltersFromJSONTyped,
  AnnotationFiltersToJSON,
  AnnotationFiltersToJSONTyped,
} from "./AnnotationFilters";

/**
 *
 * @export
 * @interface ExtendedDirectionsOptions
 */
export interface ExtendedDirectionsOptions {
  /**
   * The output response format. The default JSON format is extremely compact and ideal for web or data-constrained use cases where you want to fetch additional attributes on demand in small chunks. The OSRM format is much richer and is configurable with significantly more info for turn-by-turn navigation use cases.
   * @type {string}
   * @memberof ExtendedDirectionsOptions
   */
  format?: ExtendedDirectionsOptionsFormatEnum;
  /**
   * Optionally includes helpful banners with timing information for turn-by-turn navigation. This is only available in the OSRM format.
   * @type {boolean}
   * @memberof ExtendedDirectionsOptions
   */
  bannerInstructions?: boolean;
  /**
   * Optionally includes voice instructions with timing information for turn-by-turn navigation. This is only available in the OSRM format.
   * @type {boolean}
   * @memberof ExtendedDirectionsOptions
   */
  voiceInstructions?: boolean;
  /**
   *
   * @type {AnnotationFilters}
   * @memberof ExtendedDirectionsOptions
   */
  filters?: AnnotationFilters;
}

/**
 * @export
 */
export const ExtendedDirectionsOptionsFormatEnum = {
  Json: "json",
  Osrm: "osrm",
} as const;
export type ExtendedDirectionsOptionsFormatEnum =
  (typeof ExtendedDirectionsOptionsFormatEnum)[keyof typeof ExtendedDirectionsOptionsFormatEnum];

/**
 * Check if a given object implements the ExtendedDirectionsOptions interface.
 */
export function instanceOfExtendedDirectionsOptions(
  value: object,
): value is ExtendedDirectionsOptions {
  return true;
}

export function ExtendedDirectionsOptionsFromJSON(
  json: any,
): ExtendedDirectionsOptions {
  return ExtendedDirectionsOptionsFromJSONTyped(json, false);
}

export function ExtendedDirectionsOptionsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ExtendedDirectionsOptions {
  if (json == null) {
    return json;
  }
  return {
    format: json["format"] == null ? undefined : json["format"],
    bannerInstructions:
      json["banner_instructions"] == null
        ? undefined
        : json["banner_instructions"],
    voiceInstructions:
      json["voice_instructions"] == null
        ? undefined
        : json["voice_instructions"],
    filters:
      json["filters"] == null
        ? undefined
        : AnnotationFiltersFromJSON(json["filters"]),
  };
}

export function ExtendedDirectionsOptionsToJSON(
  json: any,
): ExtendedDirectionsOptions {
  return ExtendedDirectionsOptionsToJSONTyped(json, false);
}

export function ExtendedDirectionsOptionsToJSONTyped(
  value?: ExtendedDirectionsOptions | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    format: value["format"],
    banner_instructions: value["bannerInstructions"],
    voice_instructions: value["voiceInstructions"],
    filters: AnnotationFiltersToJSON(value["filters"]),
  };
}
