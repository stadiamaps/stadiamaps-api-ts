/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 9.3.0
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 * OpenStreetMap-specific additional fields.
 *
 * These values are exactly as they appear in the associated OSM tag.
 * @export
 * @interface OpenStreetMapAddendum
 */
export interface OpenStreetMapAddendum {
  /**
   * The principal brand of goods/services sold at a place,
   * or the common identity for individually owned and operated stores.
   * @type {string}
   * @memberof OpenStreetMapAddendum
   */
  brand?: string | null;
  /**
   * IATA airport code.
   * @type {string}
   * @memberof OpenStreetMapAddendum
   */
  iata?: string | null;
  /**
   * ICAO airport code.
   * @type {string}
   * @memberof OpenStreetMapAddendum
   */
  icao?: string | null;
  /**
   * The opening hours of the place, in the OSM Opening Hours specification.
   *
   * See https://wiki.openstreetmap.org/wiki/Key:opening_hours/specification for details.
   * @type {string}
   * @memberof OpenStreetMapAddendum
   */
  openingHours?: string | null;
  /**
   * THe company, corp, person, or other entity directly in charge of operating something.
   *
   * This is often used for public transport, hotels, restaurants, and postal services.
   * See https://wiki.openstreetmap.org/wiki/Key:operator for details
   * @type {string}
   * @memberof OpenStreetMapAddendum
   */
  operator?: string | null;
  /**
   *
   * @type {string}
   * @memberof OpenStreetMapAddendum
   */
  phone?: string | null;
  /**
   *
   * @type {string}
   * @memberof OpenStreetMapAddendum
   */
  website?: string | null;
  /**
   * Is this place wheelchair accessible?
   * @type {string}
   * @memberof OpenStreetMapAddendum
   */
  wheelchair?: string | null;
  /**
   * Wikidata concordance ID.
   * @type {string}
   * @memberof OpenStreetMapAddendum
   */
  wikidata?: string | null;
  /**
   * Wikipedia concordance ID.
   * @type {string}
   * @memberof OpenStreetMapAddendum
   */
  wikipedia?: string | null;
}

/**
 * Check if a given object implements the OpenStreetMapAddendum interface.
 */
export function instanceOfOpenStreetMapAddendum(
  value: object,
): value is OpenStreetMapAddendum {
  return true;
}

export function OpenStreetMapAddendumFromJSON(
  json: any,
): OpenStreetMapAddendum {
  return OpenStreetMapAddendumFromJSONTyped(json, false);
}

export function OpenStreetMapAddendumFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): OpenStreetMapAddendum {
  if (json == null) {
    return json;
  }
  return {
    brand: json["brand"] == null ? undefined : json["brand"],
    iata: json["iata"] == null ? undefined : json["iata"],
    icao: json["icao"] == null ? undefined : json["icao"],
    openingHours:
      json["opening_hours"] == null ? undefined : json["opening_hours"],
    operator: json["operator"] == null ? undefined : json["operator"],
    phone: json["phone"] == null ? undefined : json["phone"],
    website: json["website"] == null ? undefined : json["website"],
    wheelchair: json["wheelchair"] == null ? undefined : json["wheelchair"],
    wikidata: json["wikidata"] == null ? undefined : json["wikidata"],
    wikipedia: json["wikipedia"] == null ? undefined : json["wikipedia"],
  };
}

export function OpenStreetMapAddendumToJSON(json: any): OpenStreetMapAddendum {
  return OpenStreetMapAddendumToJSONTyped(json, false);
}

export function OpenStreetMapAddendumToJSONTyped(
  value?: OpenStreetMapAddendum | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    brand: value["brand"],
    iata: value["iata"],
    icao: value["icao"],
    opening_hours: value["openingHours"],
    operator: value["operator"],
    phone: value["phone"],
    website: value["website"],
    wheelchair: value["wheelchair"],
    wikidata: value["wikidata"],
    wikipedia: value["wikipedia"],
  };
}
