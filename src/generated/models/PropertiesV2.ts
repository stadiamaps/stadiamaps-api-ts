/* tslint:disable */
/* eslint-disable */
/**
 * Stadia Maps Geospatial APIs
 * The Stadia Maps Geospatial APIs provide you with the data you need to build awesome applications.
 *
 * The version of the OpenAPI document: 9.2.1
 * Contact: support@stadiamaps.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { Context } from "./Context";
import {
  ContextFromJSON,
  ContextFromJSONTyped,
  ContextToJSON,
  ContextToJSONTyped,
} from "./Context";
import type { MatchType } from "./MatchType";
import {
  MatchTypeFromJSON,
  MatchTypeFromJSONTyped,
  MatchTypeToJSON,
  MatchTypeToJSONTyped,
} from "./MatchType";
import type { SourceAttribution } from "./SourceAttribution";
import {
  SourceAttributionFromJSON,
  SourceAttributionFromJSONTyped,
  SourceAttributionToJSON,
  SourceAttributionToJSONTyped,
} from "./SourceAttribution";
import type { Precision } from "./Precision";
import {
  PrecisionFromJSON,
  PrecisionFromJSONTyped,
  PrecisionToJSON,
  PrecisionToJSONTyped,
} from "./Precision";
import type { AddendumV2 } from "./AddendumV2";
import {
  AddendumV2FromJSON,
  AddendumV2FromJSONTyped,
  AddendumV2ToJSON,
  AddendumV2ToJSONTyped,
} from "./AddendumV2";
import type { AddressComponentsV2 } from "./AddressComponentsV2";
import {
  AddressComponentsV2FromJSON,
  AddressComponentsV2FromJSONTyped,
  AddressComponentsV2ToJSON,
  AddressComponentsV2ToJSONTyped,
} from "./AddressComponentsV2";

/**
 * The GeoJSON properties object.
 * @export
 * @interface PropertiesV2
 */
export interface PropertiesV2 {
  /**
   *
   * @type {AddendumV2}
   * @memberof PropertiesV2
   */
  addendum?: AddendumV2 | null;
  /**
   *
   * @type {AddressComponentsV2}
   * @memberof PropertiesV2
   */
  addressComponents?: AddressComponentsV2 | null;
  /**
   * The coarse-grained location of the place (e.g. Seoul, South Korea).
   *
   * In search experiences, this is typically the second line of a result cell.
   * @type {string}
   * @memberof PropertiesV2
   */
  coarseLocation?: string | null;
  /**
   * The level of confidence (0.0 - 1.0) that the result is what you actually searched for.
   *
   * This is not necessarily the same as relevance (results are returned sorted by relevance already),
   * but rather how closely the explicit or inferred components match the result.
   * This is only present for forward geocoding responses (not autocomplete or place details).
   * @type {number}
   * @memberof PropertiesV2
   */
  confidence?: number | null;
  /**
   *
   * @type {Context}
   * @memberof PropertiesV2
   */
  context?: Context | null;
  /**
   * The distance from the search focus point, in kilometers.
   * @type {number}
   * @memberof PropertiesV2
   */
  distance?: number | null;
  /**
   * The address formatted as a single line,
   * following local postal conventions for ordering and separators.
   * @type {string}
   * @memberof PropertiesV2
   */
  formattedAddressLine?: string;
  /**
   * Address components split up into lines,
   * following local postal conventions for ordering and separators.
   * @type {Array<string>}
   * @memberof PropertiesV2
   */
  formattedAddressLines?: Array<string>;
  /**
   * The globally unique identifier for this result.
   *
   * You can use this to uniquely identify a place,
   * and to get the full details from the place details endpoint.
   *
   * NOTE: While GIDs are unique, they may not necessarily be stable in all datasets.
   * @type {string}
   * @memberof PropertiesV2
   */
  gid: string;
  /**
   * The data layer containing the place (e.g. "address" or "poi").
   * @type {string}
   * @memberof PropertiesV2
   */
  layer: string;
  /**
   * The type of match (forward geocoding endpoints only).
   * @type {MatchType}
   * @memberof PropertiesV2
   */
  matchType?: MatchType | null;
  /**
   * The best name for the place, accounting for request language preferences.
   *
   * When building an autocomplete search experience, this is the primary display string.
   * @type {string}
   * @memberof PropertiesV2
   */
  name: string;
  /**
   *
   * @type {Precision}
   * @memberof PropertiesV2
   */
  precision: Precision;
  /**
   * A list of sources from which the result is derived.
   * @type {Array<SourceAttribution>}
   * @memberof PropertiesV2
   */
  sources?: Array<SourceAttribution>;
}

/**
 * Check if a given object implements the PropertiesV2 interface.
 */
export function instanceOfPropertiesV2(value: object): value is PropertiesV2 {
  if (!("gid" in value) || value["gid"] === undefined) return false;
  if (!("layer" in value) || value["layer"] === undefined) return false;
  if (!("name" in value) || value["name"] === undefined) return false;
  if (!("precision" in value) || value["precision"] === undefined) return false;
  return true;
}

export function PropertiesV2FromJSON(json: any): PropertiesV2 {
  return PropertiesV2FromJSONTyped(json, false);
}

export function PropertiesV2FromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): PropertiesV2 {
  if (json == null) {
    return json;
  }
  return {
    addendum:
      json["addendum"] == null
        ? undefined
        : AddendumV2FromJSON(json["addendum"]),
    addressComponents:
      json["address_components"] == null
        ? undefined
        : AddressComponentsV2FromJSON(json["address_components"]),
    coarseLocation:
      json["coarse_location"] == null ? undefined : json["coarse_location"],
    confidence: json["confidence"] == null ? undefined : json["confidence"],
    context:
      json["context"] == null ? undefined : ContextFromJSON(json["context"]),
    distance: json["distance"] == null ? undefined : json["distance"],
    formattedAddressLine:
      json["formatted_address_line"] == null
        ? undefined
        : json["formatted_address_line"],
    formattedAddressLines:
      json["formatted_address_lines"] == null
        ? undefined
        : json["formatted_address_lines"],
    gid: json["gid"],
    layer: json["layer"],
    matchType:
      json["match_type"] == null
        ? undefined
        : MatchTypeFromJSON(json["match_type"]),
    name: json["name"],
    precision: PrecisionFromJSON(json["precision"]),
    sources:
      json["sources"] == null
        ? undefined
        : (json["sources"] as Array<any>).map(SourceAttributionFromJSON),
  };
}

export function PropertiesV2ToJSON(json: any): PropertiesV2 {
  return PropertiesV2ToJSONTyped(json, false);
}

export function PropertiesV2ToJSONTyped(
  value?: PropertiesV2 | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    addendum: AddendumV2ToJSON(value["addendum"]),
    address_components: AddressComponentsV2ToJSON(value["addressComponents"]),
    coarse_location: value["coarseLocation"],
    confidence: value["confidence"],
    context: ContextToJSON(value["context"]),
    distance: value["distance"],
    formatted_address_line: value["formattedAddressLine"],
    formatted_address_lines: value["formattedAddressLines"],
    gid: value["gid"],
    layer: value["layer"],
    match_type: MatchTypeToJSON(value["matchType"]),
    name: value["name"],
    precision: PrecisionToJSON(value["precision"]),
    sources:
      value["sources"] == null
        ? undefined
        : (value["sources"] as Array<any>).map(SourceAttributionToJSON),
  };
}
